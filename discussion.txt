[ Members ]

Jiaxuan Zhang, jzhan239
Jessie Luo, jluo30

[ Modifications ]

We extended the domian of our project from NPM packages and GitHub repositories to include GitHub users, commits, organizations, etc. because what we initially focused on in Phase A is not complex enough.
In phase D, we had to adjust some question from our original list of 15 so they can better accept user inputs, which in fact expanded the range of our questions. However, the key idea are retained for many questions.
For example, in Phase C, query #13 obtains info on the repository with the most forksCount, now in phase D, user can choose between forks count, stargazers count, and watchers count on the front page and view corresponding results.

[ Process ] *same as phase C

We created a GitHub repo that contains our code used to fetch and clean data: [https://github.com/robertzhidealx/db-phase-c](https://github.com/robertzhidealx/db-phase-c).

We split our files according to each entity and relation:

- commitStats:
    
    URL: [https://docs.github.com/en/rest/reference/commits](https://docs.github.com/en/rest/reference/commits)
    
    API 1:  [https://api.github.com/repos/${owner}/${repo}/commits](https://api.github.com/repos/$%7Bowner%7D/$%7Brepo%7D/commits), returns an array of object
    
    For each object in the array
    
    1. fetch data field “sha”
    2. call API 2: [https://api.github.com/repos/${owner}/${repo}/commits/${sha}](https://api.github.com/repos/$%7Bowner%7D/$%7Brepo%7D/commits/$%7BcommitId%7D), return a object
    3. name the returned object statsObj
    4. store data: sha, statsObj.additions, statsObj.deletions, statsObj.total
    
    Data format: strings
    
- hasPackage:
    
    API 1: [https://api.github.com/orgs/${owner}](https://api.github.com/orgs/$%7Bowner%7D) to get user id
    
    API 2: [https://api.npms.io/v2/package/${repo}](https://api.npms.io/v2/package/$%7Brepo%7D) to get package name
    
    Data format: strings
    
- issueCreator:
    
    API: [https://api.github.com/repos/${owner}/${repo}/issues](https://api.github.com/repos/$%7Bowner%7D/$%7Brepo%7D/issues), returns an array of object
    
    For each object in the array
    
    Fetch data: id, user.login, user.id
    
    Data format: strings
    
- organization
    
    URL: [https://docs.github.com/en/rest/reference/orgs](https://docs.github.com/en/rest/reference/orgs)
    
    API: [https://api.github.com/orgs/${org}](https://api.github.com/orgs/$%7Borg%7D), returns a object
    
    Fetch data from object: id, login, name, description, email, created_at, updated_at, location, type
    
    Data format: strings
    
- package:
    
    URL: [https://docs.github.com/en/rest/reference/packages](https://docs.github.com/en/rest/reference/packages)
    
    API: [https://api.npms.io/v2/package/${repo}](https://api.npms.io/v2/package/$%7Brepo%7D), returns a object
    
    fetch data:
    
    name the object returned as “[pkgRes](http://pkgres.collected.metadata.name/)”
    
    const name = [pkgRes.collected.metadata.name](http://pkgres.collected.metadata.name/);
    const version = pkgRes.collected.metadata.version;
    const star = pkgRes.collected.npm.starsCount;
    const score = pkgRes.score.final;
    
    Data format: strings
    
- user:
    
    URL: [https://docs.github.com/en/rest/reference/users](https://docs.github.com/en/rest/reference/users)
    
    API: [https://api.github.com/users/${owner}](https://api.github.com/users/$%7Bowner%7D), returns a object
    
    Fetch data from object: id, login, url, type
    
    Data format: strings
    
- commit:
    
    URL: [https://docs.github.com/en/rest/reference/commits](https://docs.github.com/en/rest/reference/commits)
    
    API 1: [https://api.github.com/repos/${owner}/${repo}/commits](https://api.github.com/repos/$%7Bowner%7D/$%7Brepo%7D/commits), returns an array of object
    
    Fetch data: for each object in the array,
    
    sha, author, commit.committer.name, commit.comment_count, commit.verification.verified
    
    Fetch data: id
    
    Data format: strings
    
- downloads:
    
    URL: [https://github.com/npm/registry/blob/master/docs/download-counts.md](https://github.com/npm/registry/blob/master/docs/download-counts.md)
    
    API: [https://api.npmjs.org/downloads/point/${duration}/${pkg}](https://api.npmjs.org/downloads/point/2020-07-01:2022-01-01/$%7Bpkg%7D), returns a object
    
    Fetch data from object: package, start, end, downloads
    
    Data format: strings except downloads(int)
    
- downloadsOnDate:
    
    URL: [https://github.com/npm/registry/blob/master/docs/download-counts.md](https://github.com/npm/registry/blob/master/docs/download-counts.md)
    
    API: [https://api.npmjs.org/downloads/range/](https://api.npmjs.org/downloads/range/2020-10-01:2022-01-01/$%7Bpkg%7D)[${duration}](https://api.npmjs.org/downloads/point/2020-07-01:2022-01-01/$%7Bpkg%7D)[/${pkg}](https://api.npmjs.org/downloads/range/2020-10-01:2022-01-01/$%7Bpkg%7D), returns a object
    
    Fetch data from object: package, downloads
    
    Data format: package(type), downloads(array of {day(string), downloads(int)})
    
    iterate through array “downloads” to fetch downloads(int) for each day(string)
    
- issue:
    
    URL: [https://docs.github.com/en/rest/reference/issues](https://docs.github.com/en/rest/reference/issues)
    
    API: [https://api.github.com/repos/${owner}/${repo}/issues](https://api.github.com/repos/$%7Bowner%7D/$%7Brepo%7D/issues), returns a object
    
    Fetch data from object: id, repository_url, title, state
    
    Data format: strings
    
- ownsRepo
    
    URL 1: [https://docs.github.com/en/rest/reference/users](https://docs.github.com/en/rest/reference/users)
    
    URL 2: [https://docs.github.com/en/rest/reference/](https://docs.github.com/en/rest/reference/users)repos
    
    API 1: [https://api.github.com/repos/${owner}/${repo}](https://api.github.com/repos/$%7Bowner%7D/$%7Brepo%7D), returns a object
    
    Fetch data: id (repoID)
    
    API 2: [https://api.github.com/users/${owner}](https://api.github.com/users/$%7Bowner%7D), returns a object
    
    Fetch data: id (userID)
    
- repository:
    
    URL: [https://docs.github.com/en/rest/reference/repos](https://docs.github.com/en/rest/reference/repos)
    
    API: [https://api.github.com/repos/${owner}/${repo}](https://api.github.com/repos/$%7Bowner%7D/$%7Brepo%7D), returns a object
    
    Fetch data: id, name, description, url, forks_count, stargazers_count, watchers_count, open_issues_count,
    
    Data format: strings
    
- InOrg(userID, orgID)
    
    URL: [https://docs.github.com/en/rest/reference/orgs](https://docs.github.com/en/rest/reference/orgs)
    
    API to fetch organization: [https://api.github.com/orgs/${owner}](https://api.github.com/orgs/$%7Bowner%7D), returns a object
    
    Fetch data from object: id(orgID)
    
    API to fetch user in each organization: [https://api.github.com/orgs/${owner}/members](https://api.github.com/orgs/$%7Bowner%7D/members), returns an array of object
    
    Fetch data: for each object in the array, get field “id” (userID)

[ Successes ]
- describe 2-3 technical portions of your project about which you’d like to brag a little (for example, what was a particularly challenging aspect of writing your database that you’d like to highlight so the course staff don’t overlook its complexity?)

1. We selected and fetched interesting data ourselves from the various APIs. There are no readily made CSV files and the likes, so we had to pick interesting repositories, packages, etc. that are meaningful ourselves and fetch them from the API. We also had to orchestrate the various relationships between entities by matching on IDs, etc. Another related issue is how to make our data correlate with each other such that it satisfies foreign key constraints. For example, IssueCreator is a relation between entity User and Issue, and it has has foreign key constraints on both. To build the connection, we have to first iterate over Issue to collect creator info, then add the creator with its userID, login, url, and type to user.txt if it wasn’t in it already. This ensures each issueID for IssueCreator is in issue.txt and the person who created it is one of our users. Of course, all of this is done via scripting in Node.js. In the process, we had to deduplicate rows of each data files we generated using a set, and filter out erratic symbols from every string field using a regex pattern we wrote ourselves, which is discussed in README. Our data cleaning effort is accumulated in a GitHub repository with 50 commits and detailed instructions on how to run and automate the process. Feel free to check it out: https://github.com/robertzhidealx/db-phase-c.

2. During Phase E, we implemented a solid suite of error handling mechanisms to protect our database against bad user inputs. For query 4, the user is expected to enter two dates in the format YYYY-MM-DD. In the PHP file related to this query, we once again used regex to guard against any input that does not adhere to this formatting requirement, including "202m-01-01" and "202001-01".

3. During Phase E, we diversified the different ways the user can interact with our queries by not only including text inputs, but also radio buttons for the user to select among several options as input, e.g., whether to display query results in descending or ascending orders. We also made our interface very user-friendly and intutive to use, along with detailed explanations and sample inputs for each query and update. Additionally, we created a section for the user to click on buttons to view individually tables in our database at the time of their request, so that so can very conveniently check out the changes they made to the database via either insertion or deletion queries, or simply to see what each table contains.

4. During Phase E, we coded a very organized and visually pleasing dashboard as our interface where different sections are displayed as evenly spaced out boxes. Our html interface is also responsive, with its content adjusting to screens of all sizes.

[ Known Issues ]

There is no bug. All desired features are implemented except a dancing koala who welcomes you when you enter the website (jk).

[ Extensions ]

1. An authentication mechanism for user access control.
2. Add interactive components like one where when a user clicks on the name of an organization in a PHP table or CanvasJS visualization, it will be nice to have a pop up showing the basic stats of the organization.
3. A graph showing what data the database stores, where they're from, and how they interact.
